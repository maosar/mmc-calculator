{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","lambda","mu","c","p","p0","lq","wq","w","l","handleLambdaChange","event","_this","setState","target","value","handleMuChange","handleCChange","this","alert","first","i","Math","pow","factorialize","react_default","a","createElement","Container","className","Form","Row","Col","Group","controlId","Label","Control","name","type","placeholder","concat","validateNumber","onChange","CardDeck","Card","id","Header","Body","Text","calculateP","round","calculateP0","calculateLq","calculateWq","calculateW","calculateL","num","isNaN","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8fc41832.chunk.js","sourcesContent":["import React from 'react';\nimport {Card, CardDeck, Col, Container, Form, Row} from \"react-bootstrap\";\n\nclass App extends React.Component {\n  state = {\n    lambda: '',\n    mu: '',\n    c: '',\n    p: '',\n    p0: '',\n    lq: '',\n    wq: '',\n    w: '',\n    l: '',\n  };\n\n  handleLambdaChange = event => {\n    this.setState({\n      lambda: event.target.value,\n      p: '',\n      p0: '',\n      lq: '',\n      wq: '',\n      w: '',\n      l: '',\n    });\n  };\n  handleMuChange = event => {\n    this.setState({\n      mu: event.target.value,\n      p: '',\n      p0: '',\n      lq: '',\n      wq: '',\n      w: '',\n      l: '',\n    });\n  };\n  handleCChange = event => {\n    this.setState({\n      c: event.target.value,\n      p: '',\n      p0: '',\n      lq: '',\n      wq: '',\n      w: '',\n      l: '',\n    });\n  };\n\n  calculateP() {\n    if(this.state.c * this.state.mu > this.state.lambda){\n      this.setState({\n        p: this.state.lambda / (this.state.c * this.state.mu)\n      })\n    }else{\n      this.setState({\n        lambda: '',\n        mu: '',\n        c: '',\n        p: ''\n      })\n      alert(\"Arrival rate cannot be larger than or equal to (service rate)*(number of servers)\")\n    }\n  }\n\n  calculateP0() {\n    let first = 0;\n    let c = this.state.c;\n    let p = this.state.p;\n\n    for (let i = c - 1; i >= 0; i--) {\n      first += Math.pow(c * p, i) / App.factorialize(i);\n    }\n\n    const p0 = 1 / (first + Math.pow(c * p, c) / (App.factorialize(c) * (1 - p)));\n\n    this.setState({\n      p0: p0\n    })\n\n  }\n  calculateLq(){\n    this.setState({\n      lq: (this.state.p0 * Math.pow(this.state.lambda/this.state.mu, this.state.c) * this.state.p)/(App.factorialize(this.state.c)* Math.pow(1-this.state.p,2))\n    })\n  }\n  calculateWq(){\n    this.setState({\n      wq: this.state.lq/this.state.lambda\n    })\n  }\n  calculateW(){\n    this.setState({\n      w: this.state.wq + (1/this.state.mu)\n    })\n  }\n  calculateL(){\n    this.setState({\n      l: this.state.lambda * this.state.w\n    })\n  }\n\n  static factorialize(num) {\n    if (num === 0 || num === 1)\n      return 1;\n    for (var i = num - 1; i >= 1; i--) {\n      num *= i;\n    }\n    return num;\n  }\n\n  static validateNumber(num) {\n    return num !== '' && !isNaN(num);\n  }\n\n  render() {\n\n    const lambda = this.state.lambda;\n    const mu = this.state.mu;\n    const c = this.state.c;\n    const p = this.state.p;\n    const p0 = this.state.p0;\n    const lq = this.state.lq;\n    const wq = this.state.wq;\n    const w = this.state.w;\n    const l = this.state.l;\n\n    return (\n        <Container>\n          <h1 className=\"display-1\">M/M/C Calculator</h1>\n          <hr/>\n          <Form>\n            <Row>\n              <Col>\n                <Form.Group controlId=\"formLambda\">\n                  <Form.Label>Arrival rate:</Form.Label><br/>\n                  <Form.Control\n                      name={'lambda'}\n                      type={'text'}\n                      placeholder={'Enter service rate'}\n                      className={`form-control ${this.state.lambda === '' ? '' : App.validateNumber(this.state.lambda) ? 'is-valid' : 'is-invalid'}`}\n                      onChange={this.handleLambdaChange}\n                      value={lambda}\n\n                  />\n                  <div\n                      className={`${this.state.lambda === '' ? 'text-muted' : App.validateNumber(this.state.lambda) ? 'valid-feedback' : 'invalid-feedback'}`}>{this.state.lambda === '' ? 'Arrival rate must be entered' : App.validateNumber(this.state.lambda) ? '\"' + this.state.lambda + '\" is a number!' : '\"' + this.state.lambda + '\" is NOT a number!'}</div>\n                </Form.Group>\n              </Col>\n              <Col>\n                <Form.Group controlId=\"formMu\">\n                  <Form.Label>Service rate:</Form.Label><br/>\n                  <Form.Control\n                      name={'mu'}\n                      type={'text'}\n                      placeholder={'Enter service rate'}\n                      className={`form-control ${this.state.mu === '' ? '' : App.validateNumber(this.state.mu) ? 'is-valid' : 'is-invalid'}`}\n                      onChange={this.handleMuChange}\n                      value={mu}\n                  />\n                  <div\n                      className={`${this.state.mu === '' ? 'text-muted' : App.validateNumber(this.state.mu) ? 'valid-feedback' : 'invalid-feedback'}`}>{this.state.mu === '' ? 'Service rate must be entered' : App.validateNumber(this.state.mu) ? '\"' + this.state.mu + '\" is a number!' : '\"' + this.state.mu + '\" is NOT a number!'}</div>\n                </Form.Group>\n              </Col>\n              <Col>\n                <Form.Group controlId=\"formBasicC\">\n                  <Form.Label>Number of servers:</Form.Label><br/>\n                  <Form.Control\n                      name={'name'}\n                      type={'text'}\n                      placeholder={'Enter number of servers'}\n                      className={`form-control ${this.state.c === '' ? '' : App.validateNumber(this.state.c) ? 'is-valid' : 'is-invalid'}`}\n                      onChange={this.handleCChange}\n                      value={c}\n                  />\n                  <div\n                      className={`${this.state.c === '' ? 'text-muted' : App.validateNumber(this.state.c) ? 'valid-feedback' : 'invalid-feedback'}`}>{this.state.c === '' ? 'Number of servers must be entered' : App.validateNumber(this.state.c) ? '\"' + this.state.c + '\" is a number!' : '\"' + this.state.c + '\" is NOT a number!'}</div>\n\n                </Form.Group>\n              </Col>\n            </Row>\n          </Form>\n          <hr/>\n          <CardDeck>\n            <Card id={'p-card'}>\n              <Card.Header>The average utilization of the system (p)</Card.Header>\n              <Card.Body>\n                <Card.Text>\n                  {App.validateNumber(lambda) && App.validateNumber(mu) && App.validateNumber(c) && !App.validateNumber(p) ? this.calculateP() : ''}\n                  {App.validateNumber(p) ? `P is: ${Math.round(p * 10000) / 10000}` : 'All values must be entered correctly to calculate P.'}\n                </Card.Text>\n              </Card.Body>\n            </Card>\n            <Card id={'p0-card'}>\n              <Card.Header>The  probability  that  no  customers are in the system (p0)</Card.Header>\n              <Card.Body>\n                <Card.Text>\n                  {App.validateNumber(p) && !App.validateNumber(p0) ? this.calculateP0() : ''}\n                  {App.validateNumber(p0) ? `P0 is: ${Math.round(p0 * 10000) / 10000}` : 'All values must be entered correctly to calculate p0.'}\n                </Card.Text>\n              </Card.Body>\n            </Card>\n            <Card id={'lq-card'}>\n              <Card.Header>The average number of customers waiting in line (lq)</Card.Header>\n              <Card.Body>\n                <Card.Text>\n                  {App.validateNumber(p0) && !App.validateNumber(lq) ? this.calculateLq() : ''}\n                  {App.validateNumber(lq) ? `LQ is: ${Math.round(lq * 10000) / 10000}` : 'All values must be entered correctly to calculate LQ.'}\n                </Card.Text>\n              </Card.Body>\n            </Card>\n          </CardDeck>\n          <br/>\n          <CardDeck>\n            <Card id={'wq-card'}>\n              <Card.Header>The average time spent waiting in line</Card.Header>\n              <Card.Body>\n                <Card.Text>\n                  {App.validateNumber(lq) && !App.validateNumber(wq) ? this.calculateWq() : ''}\n                  {App.validateNumber(wq) ? `WQ is: ${Math.round(wq * 10000) / 10000}` : 'All values must be entered correctly to calculate WQ.'}\n                </Card.Text>\n              </Card.Body>\n            </Card>\n            <Card id={'w-card'}>\n              <Card.Header>The average time spent in the system, including service (w)</Card.Header>\n              <Card.Body>\n                <Card.Text>\n                  {App.validateNumber(wq) && !App.validateNumber(w) ? this.calculateW() : ''}\n                  {App.validateNumber(w) ? `W is: ${Math.round(w * 10000) / 10000}` : 'All values must be entered correctly to calculate W.'}\n                </Card.Text>\n              </Card.Body>\n            </Card>\n            <Card id={'l-card'}>\n              <Card.Header>The average number of customers in the service system (l)</Card.Header>\n              <Card.Body>\n                <Card.Text>\n                  {App.validateNumber(w) && !App.validateNumber(l) ? this.calculateL() : ''}\n                  {App.validateNumber(l) ? `L is: ${Math.round(l * 10000) / 10000}` : 'All values must be entered correctly to calculate L.'}\n                </Card.Text>\n              </Card.Body>\n            </Card>\n          </CardDeck>\n          <hr/>\n\n        </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}